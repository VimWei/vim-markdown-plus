*markdown-plus.txt*   Enhanced Markdown editing for Vim

vim-markdown-plus                                   *vim-markdown-plus*

Author: VimWei

======================================================================
CONTENTS                                     *markdown-plus-contents*

1. Introduction.......................|markdown-plus-introduction|
2. Mardown after syntax...............|mardown-plus-after-syntax|
   2.1 Conceal markdown link..........|mardown-plus-conceal-link|
   2.2 fix checkbox before link.......|mardown-plus-fix-checkbox|
3. Mappings...........................|markdown-plus-mappings|
   3.1 Text Formatting................|markdown-plus-text-formatting|
   3.2 Code Blocks....................|markdown-plus-code-blocks|
   3.3 Todo Status....................|markdown-plus-todo-status|
   3.4 Link Management................|markdown-plus-link-management|
4. Commands...........................|markdown-plus-commands|
   4.1 Todo Management................|markdown-plus-todo-commands|
   4.2 List Formatting................|markdown-plus-list-formatting|
5. Options............................|markdown-plus-options|

======================================================================
1. INTRODUCTION                              *markdown-plus-introduction*

This plugin enhances Markdown editing in Vim by providing essential tools
missing from tpope/vim-markdown and lervag/wiki.vim. It features intuitive
text styling, code block formatting, checkbox toggling, link and list
management, and more — all designed for an efficient, seamless workflow with
smart, context-aware mappings that naturally extend Vim-markdown.

======================================================================
2. Mardown after syntax                     *mardown-plus-after-syntax*

This plugin includes an after/syntax/markdown.vim patch.

----------------------------------------------------------------------
2.1 Conceal markdown link                   *mardown-plus-conceal-link*

This feature improves the concealment of Markdown links in Vim. Links are
visually simplified for better readability while editing, with no impact on
the underlying text.

No extra configuration is needed.

----------------------------------------------------------------------
2.2 fix checkbox before link                *mardown-plus-fix-checkbox*

* fix https://github.com/tpope/vim-markdown/issues/212

By defining a specific, higher-priority match for checkboxes, we ensure they
are not misidentified as part of a link by the more general markdownLinkText
rule that is defined in the original syntax file.

======================================================================
3. MAPPINGS                                    *markdown-plus-mappings*

----------------------------------------------------------------------
3.1 Text Formatting                    *markdown-plus-text-formatting*

The following mappings are designed to be "smart toggles." They work in
Visual and Operator-pending modes. When used, they will either add the
specified formatting or remove it if it's already present.

Visual mappings for the selection:
- `<localleader>b`: Toggle bold
- `<localleader>i`: Toggle italic
- `<localleader>s`: Toggle strikethrough
- `<localleader>c`: Toggle inline code
- `<localleader>d`: Remove all text style

Operator-pending mappings for any text object or motion:
- `<localleader>b` + {motion}: Toggle bold
- `<localleader>i` + {motion}: Toggle italic
- `<localleader>s` + {motion}: Toggle strikethrough
- `<localleader>c` + {motion}: Toggle inline code
- `<localleader>d` + {motion}: Remove all text style

Plug mappings (for custom key bindings):
- `<Plug>MarkdownBold`: Toggle bold formatting
- `<Plug>MarkdownItalic`: Toggle italic formatting
- `<Plug>MarkdownStrike`: Toggle strikethrough formatting
- `<Plug>MarkdownCode`: Toggle inline code formatting
- `<Plug>MarkdownRemoveAll`: Remove all text style

These Plug mappings can be remapped to different keys if needed. For example:
>
    nmap <leader>b <Plug>MarkdownBold
    xmap <leader>b <Plug>MarkdownBold
<

----------------------------------------------------------------------
3.2 Code Blocks                            *markdown-plus-code-blocks*

`<leader>cb`
    In Normal mode: wraps the current line in a fenced code block.
    In Visual mode: wraps the selected lines in a fenced code block.

:ToggleCodeBlock [range]
    Command to toggle code block formatting for the given line range.
    If lines are not in a code block, wraps them in one.
    If lines are already in a code block, removes the block formatting.

----------------------------------------------------------------------
3.3 Todo Status                            *markdown-plus-todo-status*

These mappings provide an efficient way to manage todo lists.

Mappings:
- `<localleader>tc`: Toggle checkbox (add/remove `[ ]`)
- `<localleader>td`: Toggle between pending `[ ]` and done `[x]`
- `<localleader>ts`: Toggle between pending `[ ]` and suspended `[-]`
- `<localleader>tn`: Change to next maturity level
- `<localleader>tp`: Change to previous maturity level

Plug mappings (for custom key bindings):
- `<Plug>MarkdownTodoCheckbox`: Toggle checkbox formatting
- `<Plug>MarkdownTodoDone`: Toggle done status
- `<Plug>MarkdownTodoSuspend`: Toggle suspend status
- `<Plug>MarkdownTodoNext`: Change to next maturity level
- `<Plug>MarkdownTodoPrevious`: Change to previous maturity level

These Plug mappings can be remapped to different keys if needed. For example:
>
    nmap <leader>c <Plug>MarkdownTodoCheckbox
    xmap <leader>c <Plug>MarkdownTodoCheckbox
<

Maturity levels cycle through: `[ ]` > `[.]` > `[o]` > `[O]` > `[x]`

----------------------------------------------------------------------
3.4 Link Management                      *markdown-plus-link-management*

Link and image operations are now fully context-aware and streamlined.

`<lcoalleader>ll`
    Smartly toggles a regular Markdown link (`[text](url)`):
    - In Normal mode: acts as an operator (g@), so you can use motions (e.g. `<leader>mlliw`).
    - In Visual mode: applies to the selection.
    - If the target is not a link, creates one (prompts for URL if needed).
    - If the target is already a link, removes the link wrapper, keeping the text.

`<localleader>pp`
    Smartly toggles an image link (`![alt](url)`):
    - Usage is the same as above; supports operator, visual, and normal modes.
    - If not an image link, one will be created; if one already exists, it will be removed.

`<localleader>lu`
    Unwraps a Markdown link, leaving only the URL as plain text.
    Example: `[text](url)` → `url`

======================================================================
4. COMMANDS                                    *markdown-plus-commands*

----------------------------------------------------------------------
4.1 Todo Management                       *markdown-plus-todo-commands*

These commands provide range-based todo list management:

:TodoCheckboxToggle [range]
    Add or remove a todo checkbox `[ ]` for the specified line range.

:TodoDoneToggle [range]
    Toggle the todo status between pending `[ ]` and done `[x]` for the specified line range.

:TodoSuspendToggle [range]
    Toggle the checkbox between pending `[ ]` and suspended `[-]` for the specified line range.

:TodoMaturityNext [range]
    Change to next maturity level for the specified line range.
    The cycle is: `[ ]` > `[.]` > `[o]` > `[O]` > `[x]`.

:TodoMaturityPrevious [range]
    Change to previous maturity level for the specified line range.
    The cycle is: `[x]` > `[O]` > `[o]` > `[.]` > `[ ]`.

----------------------------------------------------------------------
4.2 List Formatting                     *markdown-plus-list-formatting*

Vim's built-in `gq` command can be used to format lists and paragraphs in
markdown files. This works instantly in new empty buffers because their
filetype is set to markdown automatically by the plugin.

`gq` (Normal/Visual): Format lists and paragraphs using Vim's built-in formatting commands.

:UngqFormat [range]
    Restore the original formatting of lines that were previously formatted with `gq`.

======================================================================
5. OPTIONS                                      *markdown-plus-options*

* Set local leader key
    let g:maplocalleader = "\<space>m"

* Customize checkbox symbols, default: [ ] [.] [o] [O] [x] [X] [-]
    let g:markdown_checkbox_symbols = ' .oOxX-'

======================================================================
vim:tw=78:ft=help:norl:
