*markdown-plus.txt*   Enhanced Markdown editing for Vim

vim-markdown-plus                                   *vim-markdown-plus*

Author: VimWei

======================================================================
CONTENTS                                     *markdown-plus-contents*

1. Introduction.......................|markdown-plus-introduction|
2. Mardown after syntax...............|mardown-plus-after-syntax|
   2.1 Conceal markdown link..........|mardown-plus-conceal-link|
   2.2 fix checkbox before link.......|mardown-plus-fix-checkbox|
   2.3 Disable underscore error.......|mardown-plus-disable-underscore-error|
   2.4 Git command highlighting.......|mardown-plus-git-highlight|
3. Mappings...........................|markdown-plus-mappings|
   3.1 Text Formatting................|markdown-plus-text-formatting|
   3.2 Link Management................|markdown-plus-link-management|
   3.3 Todo Status....................|markdown-plus-todo-status|
   3.4 Code Blocks....................|markdown-plus-code-blocks|
   3.5 Quote Blocks...................|markdown-plus-quote-blocks|
   3.6 List Symbol Conversion.........|markdown-plus-list-symbol|
4. Commands...........................|markdown-plus-commands|
   4.1 Todo Management................|markdown-plus-todo-commands|
   4.2 Code Block Commands............|markdown-plus-codeblock-commands|
   4.3 Quote Block Commands...........|markdown-plus-quoteblock-commands|
   4.4 List Formatting................|markdown-plus-list-formatting|
5. Options............................|markdown-plus-options|

======================================================================
1. INTRODUCTION                              *markdown-plus-introduction*

This plugin enhances Markdown editing in Vim by providing essential tools
missing from tpope/vim-markdown and lervag/wiki.vim. It features intuitive
text styling, code block formatting, checkbox toggling, link and list
management, and more â€” all designed for an efficient, seamless workflow with
smart, context-aware mappings that naturally extend Vim-markdown.

======================================================================
2. Mardown after syntax                     *mardown-plus-after-syntax*

This plugin includes an after/syntax/markdown.vim patch.

----------------------------------------------------------------------
2.1 Conceal markdown link                   *mardown-plus-conceal-link*

This feature improves the concealment of Markdown links in Vim. Links are
visually simplified for better readability while editing, with no impact on
the underlying text.

No extra configuration is needed.

----------------------------------------------------------------------
2.2 fix checkbox before link                *mardown-plus-fix-checkbox*

* fix https://github.com/tpope/vim-markdown/issues/212

By defining a specific, higher-priority match for checkboxes, we ensure they
are not misidentified as part of a link by the more general markdownLinkText
rule that is defined in the original syntax file.

----------------------------------------------------------------------
2.3 Disable underscore error         *mardown-plus-disable-underscore-error*

This plugin disables the default `markdownError` syntax rule that flags
underscores between word characters (e.g., `file_name`). This prevents
false positives and improves syntax highlighting for text where
underscores are used in valid contexts, such as filenames, URLs, or
code identifiers.

----------------------------------------------------------------------
2.4 Git command highlighting in shell scripts    *mardown-plus-git-highlight*

This plugin includes an after/syntax/sh.vim patch that provides enhanced
syntax highlighting for Git commands in bash/shell scripts. It highlights:

- `git` command itself
- Common Git subcommands like `commit`, `push`, `pull`, `status`, `add`,
  `clone`, `checkout`, `merge`, `rebase`, `log`, `diff`, `branch`, `tag`,
  `stash`, `fetch`, `remote`, `reset`, `init`, `rm`, `mv`, `show`, `blame`,
  `cherry-pick`, `revert`, `bisect`, `describe`, `config`, `submodule`

This enhancement improves readability when working with shell scripts that
contain Git commands, making it easier to distinguish between different
types of Git operations.

======================================================================
3. MAPPINGS                                    *markdown-plus-mappings*

Note: `<localleader>` is determined by `g:markdown_leader` (if set),
otherwise falls back to `g:maplocalleader`.

You can customize it, e.g.:
    let g:markdown_leader = '<leader>m'
    let g:maplocalleader = '\\'

----------------------------------------------------------------------
3.1 Text Formatting                    *markdown-plus-text-formatting*

The following mappings are designed to be "smart toggles." They work in
Visual and Operator-pending modes. When used, they will either add the
specified formatting or remove it if it's already present.

Visual mappings for the selection:
- `<localleader>b`: Toggle bold
- `<localleader>i`: Toggle italic
- `<localleader>s`: Toggle strikethrough
- `<localleader>c`: Toggle inline code
- `<localleader>d`: Remove all text style

Operator-pending mappings for any text object or motion:
- `<localleader>b` + {motion}: Toggle bold
- `<localleader>i` + {motion}: Toggle italic
- `<localleader>s` + {motion}: Toggle strikethrough
- `<localleader>c` + {motion}: Toggle inline code
- `<localleader>d` + {motion}: Remove all text style

Plug mappings (for custom key bindings):
- `<Plug>MarkdownBold`: Toggle bold formatting
- `<Plug>MarkdownItalic`: Toggle italic formatting
- `<Plug>MarkdownStrike`: Toggle strikethrough formatting
- `<Plug>MarkdownInlineCode`: Toggle inline code formatting
- `<Plug>MarkdownRemoveAll`: Remove all text style

These Plug mappings can be remapped to different keys if needed. For example:
>
    nmap <leader>b <Plug>MarkdownBold
    xmap <leader>b <Plug>MarkdownBold
<

----------------------------------------------------------------------
3.2 Link Management                      *markdown-plus-link-management*

The following mappings are designed to be "smart toggles." They work in
Visual and Operator-pending modes. When used, they will either add the
specified link formatting or remove it if it's already present.

Visual mappings for the selection:
- `<localleader>l`: Toggle wiki-style (markdown URL) link
- `<localleader>p`: Toggle image link
- `<localleader>f`: Toggle file link

Operator-pending mappings for any text object or motion:
- `<localleader>l` + {motion}: Toggle wiki-style link
- `<localleader>p` + {motion}: Toggle image link
- `<localleader>f` + {motion}: Toggle file link

Plug mappings (for custom key bindings):
- `<Plug>WikiLinkToggle`: Toggle wiki-style link
- `<Plug>ImageLinkToggle`: Toggle image link
- `<Plug>FileLinkToggle`: Toggle file link

These Plug mappings can be remapped to different keys if needed. For example:
>
    nmap <leader>l <Plug>WikiLinkToggle
    xmap <leader>l <Plug>WikiLinkToggle
<

----------------------------------------------------------------------
3.3 Todo Status                            *markdown-plus-todo-status*

These mappings provide an efficient way to manage todo lists.

Mappings:
- `<localleader>tc`: Toggle checkbox (add/remove `[ ]`)
- `<localleader>td`: Toggle between pending `[ ]` and done `[x]`
- `<localleader>ts`: Toggle between pending `[ ]` and suspended `[-]`
- `<localleader>tn`: Change to next maturity level
- `<localleader>tp`: Change to previous maturity level

Plug mappings (for custom key bindings):
- `<Plug>MarkdownTodoCheckbox`: Toggle checkbox formatting
- `<Plug>MarkdownTodoDone`: Toggle done status
- `<Plug>MarkdownTodoSuspend`: Toggle suspend status
- `<Plug>MarkdownTodoNext`: Change to next maturity level
- `<Plug>MarkdownTodoPrevious`: Change to previous maturity level

These Plug mappings can be remapped to different keys if needed. For example:
>
    nmap <leader>c <Plug>MarkdownTodoCheckbox
    xmap <leader>c <Plug>MarkdownTodoCheckbox
<

Maturity levels cycle through: `[ ]` > `[.]` > `[o]` > `[O]` > `[x]`

----------------------------------------------------------------------
3.4 Code Blocks                            *markdown-plus-code-blocks*

The following mappings provide smart toggling of fenced code blocks.

Visual and Normal mode mapping:
- `<localleader>k`: Toggle code block for the current line or selected lines

Plug mapping (for custom key bindings):
- `<Plug>MarkdownCodeBlockToggle`: Toggle code block formatting

This Plug mapping can be remapped to different keys if needed. For example:
>
    nmap <leader>cb <Plug>MarkdownCodeBlockToggle
    xmap <leader>cb <Plug>MarkdownCodeBlockToggle
<

When creating a new code block, the plugin will prompt you to enter the
programming language type.

----------------------------------------------------------------------
3.5 Quote Blocks                            *markdown-plus-quote-blocks*

The following mappings provide smart toggling of quote blocks.

Visual and Normal mode mapping:
- `<localleader>q`: Toggle quote block for the current line or selected lines

Plug mapping (for custom key bindings):
- `<Plug>MarkdownCodeBlockToggle`: Toggle quote block formatting

This Plug mapping can be remapped to different keys if needed. For example:
>
    nmap <leader>q <Plug>MarkdownQuoteBlockToggle
    xmap <leader>q <Plug>MarkdownQuoteBlockToggle
<

----------------------------------------------------------------------
3.6 List Symbol Conversion                *markdown-plus-list-symbol*

The following mappings provide smart conversion and deletion of list symbols.
They work in both Normal and Visual modes, allowing you to quickly change
the bullet/numbering style of one or more lines.

Normal/Visual mode mappings:
- `gl*`   : Convert to star/bullet list (`*`)
- `gl-`   : Convert to dash list (`-`)
- `gl+`   : Convert to plus list (`+`)
- `gl1`   : Convert to numbered list (`1.`)
- `gla`   : Convert to lower alpha list (`a.`)
- `glA`   : Convert to upper alpha list (`A.`)
- `gli`   : Convert to lower roman list (`i.`)
- `glI`   : Convert to upper roman list (`I.`)
- `gld`   : Remove list symbol (delete)

Plug mappings (for custom key bindings):
- `<Plug>MarkdownListStar`        : Convert to star/bullet list
- `<Plug>MarkdownListDash`        : Convert to dash list
- `<Plug>MarkdownListPlus`        : Convert to plus list
- `<Plug>MarkdownListNumber`      : Convert to numbered list
- `<Plug>MarkdownListLowerAlpha`  : Convert to lower alpha list
- `<Plug>MarkdownListUpperAlpha`  : Convert to upper alpha list
- `<Plug>MarkdownListLowerRome`   : Convert to lower roman list
- `<Plug>MarkdownListUpperRome`   : Convert to upper roman list
- `<Plug>MarkdownListDelete`      : Remove list symbol

These `<Plug>` mappings can be remapped to different keys if needed. For example:
>
    nmap <leader>l* <Plug>MarkdownListStar
    xmap <leader>l* <Plug>MarkdownListStar
<

This feature makes it easy to standardize or change list styles in your markdown documents with a single keystroke, supporting both single-line and multi-line selections.

======================================================================
4. COMMANDS                                    *markdown-plus-commands*

----------------------------------------------------------------------
4.1 Todo Management                       *markdown-plus-todo-commands*

These commands provide range-based todo list management:

:TodoCheckboxToggle [range]
    Add or remove a todo checkbox `[ ]` for the specified line range.

:TodoDoneToggle [range]
    Toggle the todo status between pending `[ ]` and done `[x]` for the specified line range.

:TodoSuspendToggle [range]
    Toggle the checkbox between pending `[ ]` and suspended `[-]` for the specified line range.

:TodoMaturityNext [range]
    Change to next maturity level for the specified line range.
    The cycle is: `[ ]` > `[.]` > `[o]` > `[O]` > `[x]`.

:TodoMaturityPrevious [range]
    Change to previous maturity level for the specified line range.
    The cycle is: `[x]` > `[O]` > `[o]` > `[.]` > `[ ]`.

----------------------------------------------------------------------
4.2 Code Block Commands              *markdown-plus-codeblock-commands*

:ToggleCodeBlock [range]
    Toggle code block formatting for the given line range.
    If lines are not in a code block, wraps them in one and prompts for
    language type.
    If lines are already in a code block, removes the block formatting.

----------------------------------------------------------------------
4.3 Quote Block Commands              *markdown-plus-quoteblock-commands*

:ToggleQuoteBlock [range]
    Toggle quote block formatting for the given line range.
    If lines are not in a quote block, wraps them in one.
    If lines are already in a code block, removes the block formatting.

----------------------------------------------------------------------
4.4 List Formatting                     *markdown-plus-list-formatting*

Vim's built-in `gq` command can be used to format lists and paragraphs in
markdown files. This works instantly in new empty buffers because their
filetype is set to markdown automatically by the plugin.

`gq` (Normal/Visual): Format lists and paragraphs using Vim's built-in formatting commands.

:UngqFormat [range]
    Restore the original formatting of lines that were previously formatted with `gq`.

======================================================================
5. OPTIONS                                      *markdown-plus-options*

* Set local leader key
    let g:maplocalleader = "\<space>m"

* Customize checkbox symbols, default: [ ] [.] [o] [O] [x] [X] [-]
    let g:markdown_checkbox_symbols = ' .oOxX-'

======================================================================
vim:tw=78:ft=help:norl:
