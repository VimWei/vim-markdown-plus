*markdown-plus.txt*   Enhanced Markdown editing for Vim

vim-markdown-plus                                   *vim-markdown-plus*

Author: VimWei

======================================================================
CONTENTS                                     *markdown-plus-contents*

1. Introduction.....................|markdown-plus-introduction|
2. Mappings...........................|markdown-plus-mappings|
   2.1 Text Formatting..............|markdown-plus-text-formatting|
   2.2 Code Blocks..................|markdown-plus-code-blocks|
   2.3 Checkboxes...................|markdown-plus-checkboxes|
   2.4 Link Management..............|markdown-plus-link-management|
   2.5 List Formatting..............|markdown-plus-list-formatting|
3. Commands...........................|markdown-plus-commands|
4. Options............................|markdown-plus-options|
5. Markdown Link Conceal Enhancement..|markdown-plus-link-conceal|

======================================================================
1. INTRODUCTION                              *markdown-plus-introduction*

This plugin enhances Markdown editing in Vim by providing essential tools
missing from tpope/vim-markdown and lervag/wiki.vim. It features intuitive
text styling, code block formatting, checkbox toggling, link and list
management, and more—all designed for an efficient, seamless workflow with
smart, context-aware mappings that naturally extend Vim-markdown.

======================================================================
2. MAPPINGS                                    *markdown-plus-mappings*

All default mappings are prefixed with `<leader>m`.

----------------------------------------------------------------------
2.1 Text Formatting                    *markdown-plus-text-formatting*

The following mappings are designed to be "smart toggles." They work in
Normal, Visual, and Operator-pending modes. When used, they will either
add the specified formatting or remove it if it's already present.

Normal and Visual mappings for the current word or selection:
- `<leader>mb`: Toggle **bold**
- `<leader>mi`: Toggle *italic*
- `<leader>ms`: Toggle ~~strikethrough~~
- `<leader>mc`: Toggle `inline code`

Operator-pending mappings for any text object or motion:
- `<leader>ob` + {motion}: Toggle **bold**
- `<leader>oi` + {motion}: Toggle *italic*
- `<leader>os` + {motion}: Toggle ~~strikethrough~~
- `<leader>oc` + {motion}: Toggle `inline code`

----------------------------------------------------------------------
2.2 Code Blocks                            *markdown-plus-code-blocks*

`<leader>mcb`
    In Normal mode: wraps the current line in a fenced code block.
    In Visual mode: wraps the selected lines in a fenced code block.
    (No language prompt unless implemented in the function.)

:WrapInCodeBlock [range]
    Command to wrap the given line range in a fenced code block.

----------------------------------------------------------------------
2.3 Checkboxes                               *markdown-plus-checkboxes*

These mappings provide an efficient way to manage todo lists.

`<leader>mtd`
    Adds or removes a checkbox (`- [ ] `).

`<leader>mdd`
    Toggles the checkbox between pending `[ ]` and done `[x]`.

`<leader>mdr`
    Toggles the checkbox between pending `[ ]` and rejected `[-]`.

`<leader>mdi`
    Increases the maturity level of the checkbox.
    The cycle is: `[ ]` > `[.]` > `[o]` > `[x]`.

`<leader>mdp`
    Decreases the maturity level of the checkbox.
    The cycle is: `[x]` > `[o]` > `[.]` > `[ ]`.

----------------------------------------------------------------------
2.4 Link Management                      *markdown-plus-link-management*

Link and image operations are now fully context-aware and streamlined.

`<leader>mll`
    Smartly toggles a regular Markdown link (`[text](url)`):
    - In Normal mode: acts as an operator (g@), so you can use motions (e.g. `<leader>mlliw`).
    - In Visual mode: applies to the selection.
    - If the target is not a link, creates one (prompts for URL if needed).
    - If the target is already a link, removes the link wrapper, keeping the text.

`<leader>mpp`
    Smartly toggles an image link (`![alt](url)`):
    - Usage is the same as above; supports operator, visual, and normal modes.
    - If not an image link, one will be created; if one already exists, it will be removed.

`<leader>mlu`
    Unwraps a Markdown link, leaving only the URL as plain text.
    Example: `[text](url)` → `url`

----------------------------------------------------------------------
2.5 List Formatting                            *markdown-plus-list-formatting*

Vim's built-in `gq` command can be used to format lists and paragraphs in
markdown files. This works instantly in new empty buffers because their
filetype is set to markdown automatically by the plugin.

`gq` (Normal/Visual): Format lists and paragraphs using Vim's built-in formatting commands.

:UngqFormat [range]
    Restore the original formatting of lines that were previously formatted with `gq`.

======================================================================
3. COMMANDS                                    *markdown-plus-commands*

(No commands yet.)

======================================================================
4. OPTIONS                                      *markdown-plus-options*

(No options yet.)

======================================================================
5. Markdown Link Conceal Enhancement..|markdown-plus-link-conceal|

======================================================================
Markdown Link Conceal Enhancement~          *markdown-plus-link-conceal*

This plugin includes an after/syntax/markdown.vim patch that improves the
concealment of Markdown links in Vim. Links are visually simplified for better
readability while editing, with no impact on the underlying text. No extra
configuration is needed; the enhancement is applied automatically when the
plugin is installed.

======================================================================
vim:tw=78:ft=help:norl:
